{
  "address": "0xEba51A0091A8FE7ba3400b65f3B12Dba8b12d2f5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "VIN",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "color",
          "type": "string"
        }
      ],
      "name": "CarsItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "VIN",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "date",
          "type": "string"
        }
      ],
      "name": "InspectionItem",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_VIN",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_color",
          "type": "string"
        }
      ],
      "name": "addCar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_VIN",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_date",
          "type": "string"
        }
      ],
      "name": "addInspection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "addWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cars",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "VIN",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "color",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllCars",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "VIN",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "color",
              "type": "string"
            }
          ],
          "internalType": "struct Transport.Cars[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllInspection",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "VIN",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "date",
              "type": "string"
            }
          ],
          "internalType": "struct Transport.Inspection[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vin",
          "type": "uint256"
        }
      ],
      "name": "getCar",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "VIN",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "color",
              "type": "string"
            }
          ],
          "internalType": "struct Transport.Cars[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getServiceWorkerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "inspection",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "VIN",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "serviceWorker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe7cd4e3c2f0d1865d602b9e2a5aeeb30906cd34d94587e3f0f751975f4d19f8d",
  "receipt": {
    "to": null,
    "from": "0x4350f9F07F7F5ee363074B89771C47392cEB47B8",
    "contractAddress": "0xEba51A0091A8FE7ba3400b65f3B12Dba8b12d2f5",
    "transactionIndex": 16,
    "gasUsed": "1420642",
    "logsBloom": "0x
    "blockHash": "0x58f0b171cf009414465cb719158ea43464124e45ba8e5e16fd61f583a93cef28",
    "transactionHash": "0xe7cd4e3c2f0d1865d602b9e2a5aeeb30906cd34d94587e3f0f751975f4d19f8d",
    "logs": [],
    "blockNumber": 11458912,
    "cumulativeGasUsed": "5458555",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4350f9F07F7F5ee363074B89771C47392cEB47B8"
  ],
  "numDeployments": 1,
  "solcInputHash": "9dbbe9fc860703652d640c52e5abe2cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"VIN\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"name\":\"CarsItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"VIN\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"}],\"name\":\"InspectionItem\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_VIN\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_color\",\"type\":\"string\"}],\"name\":\"addCar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_VIN\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_date\",\"type\":\"string\"}],\"name\":\"addInspection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"VIN\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCars\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"VIN\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct Transport.Cars[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllInspection\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"VIN\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"}],\"internalType\":\"struct Transport.Inspection[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vin\",\"type\":\"uint256\"}],\"name\":\"getCar\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"VIN\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"internalType\":\"struct Transport.Cars[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getServiceWorkerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inspection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"VIN\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"serviceWorker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Transport.sol\":\"Transport\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/Transport.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract Transport {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _serviceWorkerCount; //total number of Services\\n    Counters.Counter private _carCount; //total number of Cars\\n    Counters.Counter private _inspectionCount; //total number of Inspection\\n\\n    address owner;\\n    // Cars public cars;\\n\\n    struct Cars {\\n        uint256 itemId;\\n        uint256 VIN;\\n        string name;\\n        string color;\\n    }\\n\\n    struct Inspection {\\n        uint256 itemId;\\n        uint256 VIN;\\n        string date;\\n    }\\n\\n    event CarsItem(uint256 itemId, uint256 VIN, string name, string color);\\n\\n    event InspectionItem(uint256 _itemId, uint256 VIN, string date);\\n\\n    mapping(address => uint256) public serviceWorker;\\n    mapping(uint256 => Cars) public cars;\\n    mapping(uint256 => Inspection) public inspection;\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    modifier onlyServiceWorker() {\\n        require(serviceWorker[msg.sender] != 0, \\\"No such User\\\");\\n        _;\\n    }\\n\\n    function addWorker(address _addr) public onlyOwner {\\n        _serviceWorkerCount.increment(); //add 1 to the total number of items ever created\\n        uint256 itemId = _serviceWorkerCount.current();\\n        serviceWorker[_addr] = itemId;\\n    }\\n\\n    function addCar(\\n        uint256 _VIN,\\n        string memory _name,\\n        string memory _color\\n    ) public onlyServiceWorker {\\n        _carCount.increment(); //add 1 to the total number of items ever created\\n        uint256 itemId = _carCount.current();\\n\\n        cars[itemId] = Cars(itemId, _VIN, _name, _color);\\n\\n        emit CarsItem(itemId, _VIN, _name, _color);\\n    }\\n\\n    function addInspection(uint256 _VIN, string memory _date)\\n        public\\n        onlyServiceWorker\\n    {\\n        _inspectionCount.increment(); //add 1 to the total number of items ever created\\n        uint256 itemId = _inspectionCount.current();\\n\\n        inspection[itemId] = Inspection(itemId, _VIN, _date);\\n\\n        emit InspectionItem(itemId, _VIN, _date);\\n    }\\n\\n    function getAllCars() public view returns (Cars[] memory) {\\n        uint256 count = _carCount.current();\\n        uint256 index = 0;\\n\\n        Cars[] memory items = new Cars[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            uint256 currentId = cars[i + 1].itemId;\\n            Cars storage currentItem = cars[currentId];\\n            items[index] = currentItem;\\n            index += 1;\\n        }\\n        return items;\\n    }\\n\\n    function getCar(uint256 vin) public view returns (Cars[] memory) {\\n        uint256 count = _carCount.current();\\n        uint256 index = 0;\\n\\n        Cars[] memory items = new Cars[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            if (cars[i + 1].VIN == vin) {\\n                uint256 currentId = cars[i + 1].itemId;\\n                Cars storage currentItem = cars[currentId];\\n                items[index] = currentItem;\\n                index += 1;\\n            }\\n        }\\n        return items;\\n    }\\n\\n    function getAllInspection() public view returns (Inspection[] memory) {\\n        uint256 count = _inspectionCount.current();\\n        uint256 index = 0;\\n\\n        Inspection[] memory items = new Inspection[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            uint256 currentId = inspection[i + 1].itemId;\\n            Inspection storage currentItem = inspection[currentId];\\n            items[index] = currentItem;\\n            index += 1;\\n        }\\n        return items;\\n    }\\n\\n    function getServiceWorkerCount() public view returns (uint256) {\\n        uint256 count = _serviceWorkerCount.current();\\n        return count;\\n    }\\n}\\n\",\"keccak256\":\"0xde7b2ae48d09a500d6f1b83c1811d0ad1afd7ce3219bd8429718ff15e623c50e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001979380380620019798339818101604052810190620000379190620000e9565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b18262000084565b9050919050565b620000c381620000a4565b8114620000cf57600080fd5b50565b600081519050620000e381620000b8565b92915050565b6000602082840312156200010257620001016200007f565b5b60006200011284828501620000d2565b91505092915050565b61184e806200012b6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80639ff4e173116100665780639ff4e17314610157578063abfe5d5714610189578063b0e6f605146101a7578063f09d184f146101c5578063f7746e36146101e35761009e565b80631381d84e146100a35780631c0a1667146100bf5780635e8be190146100db578063806ad57e1461010b5780638104bfa614610127575b600080fd5b6100bd60048036038101906100b89190611091565b610216565b005b6100d960048036038101906100d491906110ed565b610353565b005b6100f560048036038101906100f09190611178565b6104b6565b6040516101029190611368565b60405180910390f35b610125600480360381019061012091906113e8565b610725565b005b610141600480360381019061013c91906113e8565b6107df565b60405161014e9190611424565b60405180910390f35b610171600480360381019061016c9190611178565b6107f7565b60405161018093929190611489565b60405180910390f35b6101916108a9565b60405161019e9190611368565b60405180910390f35b6101af610aeb565b6040516101bc91906115d9565b60405180910390f35b6101cd610c9b565b6040516101da9190611424565b60405180910390f35b6101fd60048036038101906101f89190611178565b610cb1565b60405161020d94939291906115fb565b60405180910390f35b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610299576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102909061169a565b60405180910390fd5b6102a36002610df1565b60006102af6002610e07565b9050604051806060016040528082815260200184815260200183815250600660008381526020019081526020016000206000820151816000015560208201518160010155604082015181600201908051906020019061030f929190610e15565b509050507f99335c2d7b63fa1798877e94c03455c6cc25fcdf11716a92526677d2245703a681848460405161034693929190611489565b60405180910390a1505050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156103d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cd9061169a565b60405180910390fd5b6103e06001610df1565b60006103ec6001610e07565b90506040518060800160405280828152602001858152602001848152602001838152506005600083815260200190815260200160002060008201518160000155602082015181600101556040820151816002019080519060200190610452929190610e15565b50606082015181600301908051906020019061046f929190610e15565b509050507f1a84bb684b1f62f73abc4daca09f17951f068311f8a1e18d26685f479be0242d818585856040516104a894939291906115fb565b60405180910390a150505050565b606060006104c46001610e07565b90506000808267ffffffffffffffff8111156104e3576104e2610f66565b5b60405190808252806020026020018201604052801561051c57816020015b610509610e9b565b8152602001906001900390816105015790505b50905060005b8381101561071957856005600060018461053c91906116e9565b81526020019081526020016000206001015414156107065760006005600060018461056791906116e9565b815260200190815260200160002060000154905060006005600083815260200190815260200160002090508060405180608001604052908160008201548152602001600182015481526020016002820180546105c29061176e565b80601f01602080910402602001604051908101604052809291908181526020018280546105ee9061176e565b801561063b5780601f106106105761010080835404028352916020019161063b565b820191906000526020600020905b81548152906001019060200180831161061e57829003601f168201915b505050505081526020016003820180546106549061176e565b80601f01602080910402602001604051908101604052809291908181526020018280546106809061176e565b80156106cd5780601f106106a2576101008083540402835291602001916106cd565b820191906000526020600020905b8154815290600101906020018083116106b057829003601f168201915b5050505050815250508486815181106106e9576106e86117a0565b5b602002602001018190525060018561070191906116e9565b945050505b8080610711906117cf565b915050610522565b50809350505050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077f57600080fd5b6107896000610df1565b60006107956000610e07565b905080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60046020528060005260406000206000915090505481565b60066020528060005260406000206000915090508060000154908060010154908060020180546108269061176e565b80601f01602080910402602001604051908101604052809291908181526020018280546108529061176e565b801561089f5780601f106108745761010080835404028352916020019161089f565b820191906000526020600020905b81548152906001019060200180831161088257829003601f168201915b5050505050905083565b606060006108b76001610e07565b90506000808267ffffffffffffffff8111156108d6576108d5610f66565b5b60405190808252806020026020018201604052801561090f57816020015b6108fc610e9b565b8152602001906001900390816108f45790505b50905060005b83811015610ae15760006005600060018461093091906116e9565b8152602001908152602001600020600001549050600060056000838152602001908152602001600020905080604051806080016040529081600082015481526020016001820154815260200160028201805461098b9061176e565b80601f01602080910402602001604051908101604052809291908181526020018280546109b79061176e565b8015610a045780601f106109d957610100808354040283529160200191610a04565b820191906000526020600020905b8154815290600101906020018083116109e757829003601f168201915b50505050508152602001600382018054610a1d9061176e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a499061176e565b8015610a965780601f10610a6b57610100808354040283529160200191610a96565b820191906000526020600020905b815481529060010190602001808311610a7957829003601f168201915b505050505081525050848681518110610ab257610ab16117a0565b5b6020026020010181905250600185610aca91906116e9565b945050508080610ad9906117cf565b915050610915565b5080935050505090565b60606000610af96002610e07565b90506000808267ffffffffffffffff811115610b1857610b17610f66565b5b604051908082528060200260200182016040528015610b5157816020015b610b3e610ec3565b815260200190600190039081610b365790505b50905060005b83811015610c9157600060066000600184610b7291906116e9565b81526020019081526020016000206000015490506000600660008381526020019081526020016000209050806040518060600160405290816000820154815260200160018201548152602001600282018054610bcd9061176e565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf99061176e565b8015610c465780601f10610c1b57610100808354040283529160200191610c46565b820191906000526020600020905b815481529060010190602001808311610c2957829003601f168201915b505050505081525050848681518110610c6257610c616117a0565b5b6020026020010181905250600185610c7a91906116e9565b945050508080610c89906117cf565b915050610b57565b5080935050505090565b600080610ca86000610e07565b90508091505090565b6005602052806000526040600020600091509050806000015490806001015490806002018054610ce09061176e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0c9061176e565b8015610d595780601f10610d2e57610100808354040283529160200191610d59565b820191906000526020600020905b815481529060010190602001808311610d3c57829003601f168201915b505050505090806003018054610d6e9061176e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9a9061176e565b8015610de75780601f10610dbc57610100808354040283529160200191610de7565b820191906000526020600020905b815481529060010190602001808311610dca57829003601f168201915b5050505050905084565b6001816000016000828254019250508190555050565b600081600001549050919050565b828054610e219061176e565b90600052602060002090601f016020900481019282610e435760008555610e8a565b82601f10610e5c57805160ff1916838001178555610e8a565b82800160010185558215610e8a579182015b82811115610e89578251825591602001919060010190610e6e565b5b509050610e979190610ee4565b5090565b6040518060800160405280600081526020016000815260200160608152602001606081525090565b60405180606001604052806000815260200160008152602001606081525090565b5b80821115610efd576000816000905550600101610ee5565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610f2881610f15565b8114610f3357600080fd5b50565b600081359050610f4581610f1f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f9e82610f55565b810181811067ffffffffffffffff82111715610fbd57610fbc610f66565b5b80604052505050565b6000610fd0610f01565b9050610fdc8282610f95565b919050565b600067ffffffffffffffff821115610ffc57610ffb610f66565b5b61100582610f55565b9050602081019050919050565b82818337600083830152505050565b600061103461102f84610fe1565b610fc6565b9050828152602081018484840111156110505761104f610f50565b5b61105b848285611012565b509392505050565b600082601f83011261107857611077610f4b565b5b8135611088848260208601611021565b91505092915050565b600080604083850312156110a8576110a7610f0b565b5b60006110b685828601610f36565b925050602083013567ffffffffffffffff8111156110d7576110d6610f10565b5b6110e385828601611063565b9150509250929050565b60008060006060848603121561110657611105610f0b565b5b600061111486828701610f36565b935050602084013567ffffffffffffffff81111561113557611134610f10565b5b61114186828701611063565b925050604084013567ffffffffffffffff81111561116257611161610f10565b5b61116e86828701611063565b9150509250925092565b60006020828403121561118e5761118d610f0b565b5b600061119c84828501610f36565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6111da81610f15565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561121a5780820151818401526020810190506111ff565b83811115611229576000848401525b50505050565b600061123a826111e0565b61124481856111eb565b93506112548185602086016111fc565b61125d81610f55565b840191505092915050565b600060808301600083015161128060008601826111d1565b50602083015161129360208601826111d1565b50604083015184820360408601526112ab828261122f565b915050606083015184820360608601526112c5828261122f565b9150508091505092915050565b60006112de8383611268565b905092915050565b6000602082019050919050565b60006112fe826111a5565b61130881856111b0565b93508360208202850161131a856111c1565b8060005b85811015611356578484038952815161133785826112d2565b9450611342836112e6565b925060208a0199505060018101905061131e565b50829750879550505050505092915050565b6000602082019050818103600083015261138281846112f3565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113b58261138a565b9050919050565b6113c5816113aa565b81146113d057600080fd5b50565b6000813590506113e2816113bc565b92915050565b6000602082840312156113fe576113fd610f0b565b5b600061140c848285016113d3565b91505092915050565b61141e81610f15565b82525050565b60006020820190506114396000830184611415565b92915050565b600082825260208201905092915050565b600061145b826111e0565b611465818561143f565b93506114758185602086016111fc565b61147e81610f55565b840191505092915050565b600060608201905061149e6000830186611415565b6114ab6020830185611415565b81810360408301526114bd8184611450565b9050949350505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060608301600083015161150b60008601826111d1565b50602083015161151e60208601826111d1565b5060408301518482036040860152611536828261122f565b9150508091505092915050565b600061154f83836114f3565b905092915050565b6000602082019050919050565b600061156f826114c7565b61157981856114d2565b93508360208202850161158b856114e3565b8060005b858110156115c757848403895281516115a88582611543565b94506115b383611557565b925060208a0199505060018101905061158f565b50829750879550505050505092915050565b600060208201905081810360008301526115f38184611564565b905092915050565b60006080820190506116106000830187611415565b61161d6020830186611415565b818103604083015261162f8185611450565b905081810360608301526116438184611450565b905095945050505050565b7f4e6f207375636820557365720000000000000000000000000000000000000000600082015250565b6000611684600c8361143f565b915061168f8261164e565b602082019050919050565b600060208201905081810360008301526116b381611677565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006116f482610f15565b91506116ff83610f15565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611734576117336116ba565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061178657607f821691505b6020821081141561179a5761179961173f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006117da82610f15565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561180d5761180c6116ba565b5b60018201905091905056fea26469706673582212208bc255117d3d945a1fb4f2f6157149631bbe81f676cc7a3e687d3fe80901cda464736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80639ff4e173116100665780639ff4e17314610157578063abfe5d5714610189578063b0e6f605146101a7578063f09d184f146101c5578063f7746e36146101e35761009e565b80631381d84e146100a35780631c0a1667146100bf5780635e8be190146100db578063806ad57e1461010b5780638104bfa614610127575b600080fd5b6100bd60048036038101906100b89190611091565b610216565b005b6100d960048036038101906100d491906110ed565b610353565b005b6100f560048036038101906100f09190611178565b6104b6565b6040516101029190611368565b60405180910390f35b610125600480360381019061012091906113e8565b610725565b005b610141600480360381019061013c91906113e8565b6107df565b60405161014e9190611424565b60405180910390f35b610171600480360381019061016c9190611178565b6107f7565b60405161018093929190611489565b60405180910390f35b6101916108a9565b60405161019e9190611368565b60405180910390f35b6101af610aeb565b6040516101bc91906115d9565b60405180910390f35b6101cd610c9b565b6040516101da9190611424565b60405180910390f35b6101fd60048036038101906101f89190611178565b610cb1565b60405161020d94939291906115fb565b60405180910390f35b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610299576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102909061169a565b60405180910390fd5b6102a36002610df1565b60006102af6002610e07565b9050604051806060016040528082815260200184815260200183815250600660008381526020019081526020016000206000820151816000015560208201518160010155604082015181600201908051906020019061030f929190610e15565b509050507f99335c2d7b63fa1798877e94c03455c6cc25fcdf11716a92526677d2245703a681848460405161034693929190611489565b60405180910390a1505050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156103d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cd9061169a565b60405180910390fd5b6103e06001610df1565b60006103ec6001610e07565b90506040518060800160405280828152602001858152602001848152602001838152506005600083815260200190815260200160002060008201518160000155602082015181600101556040820151816002019080519060200190610452929190610e15565b50606082015181600301908051906020019061046f929190610e15565b509050507f1a84bb684b1f62f73abc4daca09f17951f068311f8a1e18d26685f479be0242d818585856040516104a894939291906115fb565b60405180910390a150505050565b606060006104c46001610e07565b90506000808267ffffffffffffffff8111156104e3576104e2610f66565b5b60405190808252806020026020018201604052801561051c57816020015b610509610e9b565b8152602001906001900390816105015790505b50905060005b8381101561071957856005600060018461053c91906116e9565b81526020019081526020016000206001015414156107065760006005600060018461056791906116e9565b815260200190815260200160002060000154905060006005600083815260200190815260200160002090508060405180608001604052908160008201548152602001600182015481526020016002820180546105c29061176e565b80601f01602080910402602001604051908101604052809291908181526020018280546105ee9061176e565b801561063b5780601f106106105761010080835404028352916020019161063b565b820191906000526020600020905b81548152906001019060200180831161061e57829003601f168201915b505050505081526020016003820180546106549061176e565b80601f01602080910402602001604051908101604052809291908181526020018280546106809061176e565b80156106cd5780601f106106a2576101008083540402835291602001916106cd565b820191906000526020600020905b8154815290600101906020018083116106b057829003601f168201915b5050505050815250508486815181106106e9576106e86117a0565b5b602002602001018190525060018561070191906116e9565b945050505b8080610711906117cf565b915050610522565b50809350505050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077f57600080fd5b6107896000610df1565b60006107956000610e07565b905080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60046020528060005260406000206000915090505481565b60066020528060005260406000206000915090508060000154908060010154908060020180546108269061176e565b80601f01602080910402602001604051908101604052809291908181526020018280546108529061176e565b801561089f5780601f106108745761010080835404028352916020019161089f565b820191906000526020600020905b81548152906001019060200180831161088257829003601f168201915b5050505050905083565b606060006108b76001610e07565b90506000808267ffffffffffffffff8111156108d6576108d5610f66565b5b60405190808252806020026020018201604052801561090f57816020015b6108fc610e9b565b8152602001906001900390816108f45790505b50905060005b83811015610ae15760006005600060018461093091906116e9565b8152602001908152602001600020600001549050600060056000838152602001908152602001600020905080604051806080016040529081600082015481526020016001820154815260200160028201805461098b9061176e565b80601f01602080910402602001604051908101604052809291908181526020018280546109b79061176e565b8015610a045780601f106109d957610100808354040283529160200191610a04565b820191906000526020600020905b8154815290600101906020018083116109e757829003601f168201915b50505050508152602001600382018054610a1d9061176e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a499061176e565b8015610a965780601f10610a6b57610100808354040283529160200191610a96565b820191906000526020600020905b815481529060010190602001808311610a7957829003601f168201915b505050505081525050848681518110610ab257610ab16117a0565b5b6020026020010181905250600185610aca91906116e9565b945050508080610ad9906117cf565b915050610915565b5080935050505090565b60606000610af96002610e07565b90506000808267ffffffffffffffff811115610b1857610b17610f66565b5b604051908082528060200260200182016040528015610b5157816020015b610b3e610ec3565b815260200190600190039081610b365790505b50905060005b83811015610c9157600060066000600184610b7291906116e9565b81526020019081526020016000206000015490506000600660008381526020019081526020016000209050806040518060600160405290816000820154815260200160018201548152602001600282018054610bcd9061176e565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf99061176e565b8015610c465780601f10610c1b57610100808354040283529160200191610c46565b820191906000526020600020905b815481529060010190602001808311610c2957829003601f168201915b505050505081525050848681518110610c6257610c616117a0565b5b6020026020010181905250600185610c7a91906116e9565b945050508080610c89906117cf565b915050610b57565b5080935050505090565b600080610ca86000610e07565b90508091505090565b6005602052806000526040600020600091509050806000015490806001015490806002018054610ce09061176e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0c9061176e565b8015610d595780601f10610d2e57610100808354040283529160200191610d59565b820191906000526020600020905b815481529060010190602001808311610d3c57829003601f168201915b505050505090806003018054610d6e9061176e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9a9061176e565b8015610de75780601f10610dbc57610100808354040283529160200191610de7565b820191906000526020600020905b815481529060010190602001808311610dca57829003601f168201915b5050505050905084565b6001816000016000828254019250508190555050565b600081600001549050919050565b828054610e219061176e565b90600052602060002090601f016020900481019282610e435760008555610e8a565b82601f10610e5c57805160ff1916838001178555610e8a565b82800160010185558215610e8a579182015b82811115610e89578251825591602001919060010190610e6e565b5b509050610e979190610ee4565b5090565b6040518060800160405280600081526020016000815260200160608152602001606081525090565b60405180606001604052806000815260200160008152602001606081525090565b5b80821115610efd576000816000905550600101610ee5565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610f2881610f15565b8114610f3357600080fd5b50565b600081359050610f4581610f1f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f9e82610f55565b810181811067ffffffffffffffff82111715610fbd57610fbc610f66565b5b80604052505050565b6000610fd0610f01565b9050610fdc8282610f95565b919050565b600067ffffffffffffffff821115610ffc57610ffb610f66565b5b61100582610f55565b9050602081019050919050565b82818337600083830152505050565b600061103461102f84610fe1565b610fc6565b9050828152602081018484840111156110505761104f610f50565b5b61105b848285611012565b509392505050565b600082601f83011261107857611077610f4b565b5b8135611088848260208601611021565b91505092915050565b600080604083850312156110a8576110a7610f0b565b5b60006110b685828601610f36565b925050602083013567ffffffffffffffff8111156110d7576110d6610f10565b5b6110e385828601611063565b9150509250929050565b60008060006060848603121561110657611105610f0b565b5b600061111486828701610f36565b935050602084013567ffffffffffffffff81111561113557611134610f10565b5b61114186828701611063565b925050604084013567ffffffffffffffff81111561116257611161610f10565b5b61116e86828701611063565b9150509250925092565b60006020828403121561118e5761118d610f0b565b5b600061119c84828501610f36565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6111da81610f15565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561121a5780820151818401526020810190506111ff565b83811115611229576000848401525b50505050565b600061123a826111e0565b61124481856111eb565b93506112548185602086016111fc565b61125d81610f55565b840191505092915050565b600060808301600083015161128060008601826111d1565b50602083015161129360208601826111d1565b50604083015184820360408601526112ab828261122f565b915050606083015184820360608601526112c5828261122f565b9150508091505092915050565b60006112de8383611268565b905092915050565b6000602082019050919050565b60006112fe826111a5565b61130881856111b0565b93508360208202850161131a856111c1565b8060005b85811015611356578484038952815161133785826112d2565b9450611342836112e6565b925060208a0199505060018101905061131e565b50829750879550505050505092915050565b6000602082019050818103600083015261138281846112f3565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113b58261138a565b9050919050565b6113c5816113aa565b81146113d057600080fd5b50565b6000813590506113e2816113bc565b92915050565b6000602082840312156113fe576113fd610f0b565b5b600061140c848285016113d3565b91505092915050565b61141e81610f15565b82525050565b60006020820190506114396000830184611415565b92915050565b600082825260208201905092915050565b600061145b826111e0565b611465818561143f565b93506114758185602086016111fc565b61147e81610f55565b840191505092915050565b600060608201905061149e6000830186611415565b6114ab6020830185611415565b81810360408301526114bd8184611450565b9050949350505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060608301600083015161150b60008601826111d1565b50602083015161151e60208601826111d1565b5060408301518482036040860152611536828261122f565b9150508091505092915050565b600061154f83836114f3565b905092915050565b6000602082019050919050565b600061156f826114c7565b61157981856114d2565b93508360208202850161158b856114e3565b8060005b858110156115c757848403895281516115a88582611543565b94506115b383611557565b925060208a0199505060018101905061158f565b50829750879550505050505092915050565b600060208201905081810360008301526115f38184611564565b905092915050565b60006080820190506116106000830187611415565b61161d6020830186611415565b818103604083015261162f8185611450565b905081810360608301526116438184611450565b905095945050505050565b7f4e6f207375636820557365720000000000000000000000000000000000000000600082015250565b6000611684600c8361143f565b915061168f8261164e565b602082019050919050565b600060208201905081810360008301526116b381611677565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006116f482610f15565b91506116ff83610f15565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611734576117336116ba565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061178657607f821691505b6020821081141561179a5761179961173f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006117da82610f15565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561180d5761180c6116ba565b5b60018201905091905056fea26469706673582212208bc255117d3d945a1fb4f2f6157149631bbe81f676cc7a3e687d3fe80901cda464736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 83,
        "contract": "contracts/Transport.sol:Transport",
        "label": "_serviceWorkerCount",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 86,
        "contract": "contracts/Transport.sol:Transport",
        "label": "_carCount",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 89,
        "contract": "contracts/Transport.sol:Transport",
        "label": "_inspectionCount",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 91,
        "contract": "contracts/Transport.sol:Transport",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/Transport.sol:Transport",
        "label": "serviceWorker",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 134,
        "contract": "contracts/Transport.sol:Transport",
        "label": "cars",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Cars)100_storage)"
      },
      {
        "astId": 139,
        "contract": "contracts/Transport.sol:Transport",
        "label": "inspection",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Inspection)107_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Cars)100_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Transport.Cars)",
        "numberOfBytes": "32",
        "value": "t_struct(Cars)100_storage"
      },
      "t_mapping(t_uint256,t_struct(Inspection)107_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Transport.Inspection)",
        "numberOfBytes": "32",
        "value": "t_struct(Inspection)107_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Cars)100_storage": {
        "encoding": "inplace",
        "label": "struct Transport.Cars",
        "members": [
          {
            "astId": 93,
            "contract": "contracts/Transport.sol:Transport",
            "label": "itemId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 95,
            "contract": "contracts/Transport.sol:Transport",
            "label": "VIN",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 97,
            "contract": "contracts/Transport.sol:Transport",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 99,
            "contract": "contracts/Transport.sol:Transport",
            "label": "color",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/Transport.sol:Transport",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Inspection)107_storage": {
        "encoding": "inplace",
        "label": "struct Transport.Inspection",
        "members": [
          {
            "astId": 102,
            "contract": "contracts/Transport.sol:Transport",
            "label": "itemId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 104,
            "contract": "contracts/Transport.sol:Transport",
            "label": "VIN",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 106,
            "contract": "contracts/Transport.sol:Transport",
            "label": "date",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}